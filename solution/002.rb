# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

def fibonacci_sequence limit
  #sequence = [1, 2]
  #next_fib = 3
  #
  #until next_fib > limit
  #  sequence.push next_fib
  #  next_fib = sequence[-2] + sequence[-1]
  #end
  #
  #sequence

  # need a functional way of doing this
  # Aha! Array#take_while is my answer!

  fibonacci = Hash.new{ |h, k| h[k] = k < 2 ? k : h[k-1] + h[k-2] }

  relevant_range = (1..1.0/0).take_while { |n| fibonacci[n] <= limit }
  relevant_range.map { |n| fibonacci[n] }
end

class Array
  def even
    self.find_all { |n| n % 2 == 0 }
  end

  def sum
    self.inject { |sum, n| sum + n }
  end
end

fibonacci_sequence(4_000_000).even.sum